{\rtf1\ansi\ansicpg1252\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\fmodern\fcharset0 CourierNewPS-BoldMT;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red16\green121\blue2;\red115\green0\blue2;
\red117\green117\blue117;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\b\fs28 \cf2 \expnd0\expndtw0\kerning0
pragma solidity ^\cf3 \expnd0\expndtw0\kerning0
0.4\cf2 \expnd0\expndtw0\kerning0
.2;\
contract tokenRecipient \{ function \cf4 \expnd0\expndtw0\kerning0
receiveApproval\cf2 \expnd0\expndtw0\kerning0
(address _from, uint256 _value, address _token, bytes _extraData); \}\
\
contract MyToken \{\
    \cf5 \expnd0\expndtw0\kerning0
/* Public variables of the token */\cf2 \expnd0\expndtw0\kerning0
\
    string public standard = \cf4 \expnd0\expndtw0\kerning0
'Token 0.1'\cf2 \expnd0\expndtw0\kerning0
;\
    string public name;\
    string public symbol;\
    uint8 public decimals;\
    uint256 public totalSupply;\
\
    \cf5 \expnd0\expndtw0\kerning0
/* This creates an array with all balances */\cf2 \expnd0\expndtw0\kerning0
\
    mapping (address => uint256) public balanceOf;\
    mapping (address => mapping (address => uint256)) public allowance;\
\
    \cf5 \expnd0\expndtw0\kerning0
/* This generates a public event on the blockchain that will notify clients */\cf2 \expnd0\expndtw0\kerning0
\
    event Transfer(address indexed from, address indexed to, uint256 value);\
\
    \cf5 \expnd0\expndtw0\kerning0
/* Initializes contract with initial supply tokens to the creator of the contract */\cf2 \expnd0\expndtw0\kerning0
\
    function \cf4 \expnd0\expndtw0\kerning0
MyToken\cf2 \expnd0\expndtw0\kerning0
(\
        uint256 initialSupply,\
        string tokenName,\
        uint8 decimalUnits,\
        string tokenSymbol\
        ) \{\
        balanceOf[msg.sender] = initialSupply;              \cf5 \expnd0\expndtw0\kerning0
// Give the creator all initial tokens\cf2 \expnd0\expndtw0\kerning0
\
        totalSupply = initialSupply;                        \cf5 \expnd0\expndtw0\kerning0
// Update total supply\cf2 \expnd0\expndtw0\kerning0
\
        name = tokenName;                                   \cf5 \expnd0\expndtw0\kerning0
// Set the name for display purposes\cf2 \expnd0\expndtw0\kerning0
\
        symbol = tokenSymbol;                               \cf5 \expnd0\expndtw0\kerning0
// Set the symbol for display purposes\cf2 \expnd0\expndtw0\kerning0
\
        decimals = decimalUnits;                            \cf5 \expnd0\expndtw0\kerning0
// Amount of decimals for display purposes\cf2 \expnd0\expndtw0\kerning0
\
    \}\
\
    \cf5 \expnd0\expndtw0\kerning0
/* Send coins */\cf2 \expnd0\expndtw0\kerning0
\
    function \cf4 \expnd0\expndtw0\kerning0
transfer\cf2 \expnd0\expndtw0\kerning0
(address _to, uint256 _value) \{\
        if (balanceOf[msg.sender] < _value) throw;           \cf5 \expnd0\expndtw0\kerning0
// Check if the sender has enough\cf2 \expnd0\expndtw0\kerning0
\
        if (balanceOf[_to] + _value < balanceOf[_to]) throw; \cf5 \expnd0\expndtw0\kerning0
// Check for overflows\cf2 \expnd0\expndtw0\kerning0
\
        balanceOf[msg.sender] -= _value;                     \cf5 \expnd0\expndtw0\kerning0
// Subtract from the sender\cf2 \expnd0\expndtw0\kerning0
\
        balanceOf[_to] += _value;                            \cf5 \expnd0\expndtw0\kerning0
// Add the same to the recipient\cf2 \expnd0\expndtw0\kerning0
\
        Transfer(msg.sender, _to, _value);                   \cf5 \expnd0\expndtw0\kerning0
// Notify anyone listening that this transfer took place\cf2 \expnd0\expndtw0\kerning0
\
    \}\
\
    \cf5 \expnd0\expndtw0\kerning0
/* Allow another contract to spend some tokens in your behalf */\cf2 \expnd0\expndtw0\kerning0
\
    function \cf4 \expnd0\expndtw0\kerning0
approve\cf2 \expnd0\expndtw0\kerning0
(address _spender, uint256 _value)\
        \cf4 \expnd0\expndtw0\kerning0
returns\cf2 \expnd0\expndtw0\kerning0
 (bool success) \{\
        allowance[msg.sender][_spender] = _value;\
        return true;\
    \}\
\
    \cf5 \expnd0\expndtw0\kerning0
/* Approve and then comunicate the approved contract in a single tx */\cf2 \expnd0\expndtw0\kerning0
\
    function \cf4 \expnd0\expndtw0\kerning0
approveAndCall\cf2 \expnd0\expndtw0\kerning0
(address _spender, uint256 _value, bytes _extraData)\
        \cf4 \expnd0\expndtw0\kerning0
returns\cf2 \expnd0\expndtw0\kerning0
 (bool success) \{\
        tokenRecipient spender = tokenRecipient(_spender);\
        if (approve(_spender, _value)) \{\
            spender.receiveApproval(msg.sender, _value, this, _extraData);\
            return true;\
        \}\
    \}        \
\
    \cf5 \expnd0\expndtw0\kerning0
/* A contract attempts to get the coins */\cf2 \expnd0\expndtw0\kerning0
\
    function \cf4 \expnd0\expndtw0\kerning0
transferFrom\cf2 \expnd0\expndtw0\kerning0
(address _from, address _to, uint256 _value) \cf4 \expnd0\expndtw0\kerning0
returns\cf2 \expnd0\expndtw0\kerning0
 (bool success) \{\
        if (balanceOf[_from] < _value) throw;                 \cf5 \expnd0\expndtw0\kerning0
// Check if the sender has enough\cf2 \expnd0\expndtw0\kerning0
\
        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  \cf5 \expnd0\expndtw0\kerning0
// Check for overflows\cf2 \expnd0\expndtw0\kerning0
\
        if (_value > allowance[_from][msg.sender]) throw;   \cf5 \expnd0\expndtw0\kerning0
// Check allowance\cf2 \expnd0\expndtw0\kerning0
\
        balanceOf[_from] -= _value;                          \cf5 \expnd0\expndtw0\kerning0
// Subtract from the sender\cf2 \expnd0\expndtw0\kerning0
\
        balanceOf[_to] += _value;                            \cf5 \expnd0\expndtw0\kerning0
// Add the same to the recipient\cf2 \expnd0\expndtw0\kerning0
\
        allowance[_from][msg.sender] -= _value;\
        Transfer(_from, _to, _value);\
        return true;\
    \}\
\
    \cf5 \expnd0\expndtw0\kerning0
/* This unnamed function is called whenever someone tries to send ether to it */\cf2 \expnd0\expndtw0\kerning0
\
    function () \{\
        throw;     \cf5 \expnd0\expndtw0\kerning0
// Prevents accidental sending of ether\cf2 \expnd0\expndtw0\kerning0
\
    \}\
\}}